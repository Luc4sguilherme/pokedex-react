{"version":3,"sources":["utils/getPokemonImage.js","components/card/index.js","services/pokeapi.js","App.js","index.js"],"names":["getPokemonImage","sprites","other","dream_world","front_default","Card","props","elementTypes","types","map","typesInfo","type","name","className","src","alt","id","join","limit","offset","a","fetch","response","json","data","url","pokemon","App","useState","gridColumnCount","setGridColumnCount","pokemons","setPokemons","setOffset","hasMore","setHasMore","fetchMoreData","length","getPokemons","then","results","Promise","all","getPokemon","useEffect","grid","document","querySelector","gridColumn","window","getComputedStyle","getPropertyValue","split","dataLength","next","loader","style","justifySelf","padding","ReactDOM","render","getElementById"],"mappings":"uNAUeA,G,YAVS,SAACC,GACvB,OAAgD,OAA5CA,EAAQC,MAAMC,YAAYC,cACrBH,EAAQC,MAAMC,YAAYC,cAC4B,OAApDH,EAAQC,MAAM,oBAAoBE,cACpCH,EAAQC,MAAM,oBAAoBE,cAElCH,EAAQG,gB,OCWJC,MAZf,SAAcC,GACZ,IAAMC,EAAeD,EAAME,MAAMC,KAAI,SAAAC,GAAS,OAAIA,EAAUC,KAAKC,QAEjE,OACE,sBAAKC,UAAS,eAAUN,EAAa,IAArC,UACE,qBAAKM,UAAU,aAAaC,IAAG,UAAKd,EAAgBM,EAAML,UAAYc,IAAG,UAAKT,EAAMM,QACpF,oBAAIC,UAAU,aAAd,mBAA+BP,EAAMU,GAArC,aAA4CV,EAAMM,QAClD,mBAAGC,UAAU,gBAAb,mBAAiCN,EAAaU,KAAK,c,mECZlD,WAA2BC,EAAOC,GAAlC,iBAAAC,EAAA,sEACkBC,MAAM,2CAAD,OAA4CH,EAA5C,mBAA4DC,IADnF,cACCG,EADD,gBAEcA,EAASC,OAFvB,cAECC,EAFD,yBAIEA,GAJF,4C,kEAOA,WAA0BC,GAA1B,iBAAAL,EAAA,sEACkBC,MAAMI,GADxB,cACCH,EADD,gBAEiBA,EAASC,OAF1B,cAECG,EAFD,yBAIEA,GAJF,4C,sBCmEQC,MAnEf,WACE,IADa,EAI+BC,mBAAS,GAJxC,mBAIRC,EAJQ,KAISC,EAJT,OAKiBF,mBAAS,IAL1B,mBAKRG,EALQ,KAKEC,EALF,OAMaJ,mBAAS,GANtB,mBAMRT,EANQ,KAMAc,EANA,OAOeL,oBAAS,GAPxB,mBAORM,EAPQ,KAOCC,EAPD,KASPC,EAAgB,WAChBL,EAASM,QATU,KAUrBF,GAAW,IDlBV,SAAP,oCCsBIG,CAbY,GAaOnB,GAAQoB,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QACjCC,QAAQC,IAAIF,EAAQ/B,KAAI,SAAAe,GAAI,ODhB3B,SAAP,kCCgBsCmB,CAAWnB,EAAKC,SAAOc,MAAK,SAAAb,GAC1DM,EAAY,GAAD,mBAAKD,GAAL,YAAkBL,WAIjCO,EAAUd,EAnBE,MAiCd,OAXAyB,qBAAU,WACRR,MACC,IAEHQ,qBAAU,WACR,IAAMC,EAAOC,SAASC,cAAc,YAE9BC,EADoBC,OAAOC,iBAAiBL,GACbM,iBAAiB,yBAAyBC,MAAM,KACrFtB,EAAmBkB,EAAWX,UAC7B,IAGD,sBAAKxB,UAAU,YAAf,UACE,4CACA,cAAC,IAAD,CACEA,UAAU,UACVwC,WAAYtB,EAASM,OACrBiB,KAAMlB,EACNF,QAASA,EACTqB,OACA,qBAAKC,MAAO,CACVR,WAAW,QAAD,OAAUnB,GACpB4B,YAAa,SACbC,QAAS,QAHX,SAKE,qBAAK7C,UAAU,aAXnB,SAeGkB,EAAStB,KAAI,SAACiB,GAAD,OACZ,cAAC,EAAD,CAEEV,GAAIU,EAAQV,GACZJ,KAAMc,EAAQd,KACdJ,MAAOkB,EAAQlB,MACfP,QAASyB,EAAQzB,SAJZyB,EAAQV,aC1DzB2C,IAASC,OACP,cAAC,EAAD,IACAd,SAASe,eAAe,W","file":"static/js/main.7ad51070.chunk.js","sourcesContent":["const getPokemonImage = (sprites) => {\n  if (sprites.other.dream_world.front_default !== null) {\n    return sprites.other.dream_world.front_default\n  } else if (sprites.other[\"official-artwork\"].front_default !== null) {\n    return sprites.other[\"official-artwork\"].front_default\n  } else {\n    return sprites.front_default\n  }\n}\n\nexport default getPokemonImage","import React from 'react';\n\nimport './styles.css'\nimport getPokemonImage from '../../utils/getPokemonImage'\n\nfunction Card(props) {\n  const elementTypes = props.types.map(typesInfo => typesInfo.type.name)\n\n  return (\n    <div className={`card ${elementTypes[0]}`}>\n      <img className=\"card-image\" src={`${getPokemonImage(props.sprites)}`} alt={`${props.name}`}/>\n      <h2 className=\"card-title\">{`${props.id}. ${props.name}`}</h2>\n      <p className=\"card-subtitle\">{`${elementTypes.join(' | ')}`}</p>\n    </div>\n  );\n}\n\nexport default Card;","export async function getPokemons(limit, offset) {\n  const response = await fetch(`https://pokeapi.co/api/v2/pokemon?limit=${limit}&offset=${offset}`);\n  const data = await response.json();\n\n  return data;\n}\n\nexport async function getPokemon(url) {\n  const response = await fetch(url);\n  const pokemon = await response.json();\n\n  return pokemon;\n}\n","import React, { useEffect, useState } from 'react';\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nimport './App.css';\nimport Card from './components/card'\nimport { getPokemon, getPokemons} from './services/pokeapi'\n\nfunction App() {\n  const amountOfPoKemons = 1118\n  const limit = 50\n\n  let [gridColumnCount, setGridColumnCount] = useState(1) \n  let [pokemons, setPokemons] = useState([])\n  let [offset, setOffset] = useState(0)\n  let [hasMore, setHasMore] = useState(true)\n\n  const fetchMoreData = () => {\n    if (pokemons.length >= amountOfPoKemons) {\n      setHasMore(false);\n      return;\n    }\n\n    getPokemons(limit, offset).then(({ results }) => {\n      Promise.all(results.map(data => getPokemon(data.url))).then(pokemon => {\n        setPokemons([...pokemons, ...pokemon]) \n      })\n    })\n\n    setOffset(offset + limit)\n  }\n\n  useEffect(()=> {\n    fetchMoreData()\n  }, [])\n\n  useEffect(() => {\n    const grid = document.querySelector('.pokedex')\n    const gridComputedStyle = window.getComputedStyle(grid);\n    const gridColumn = gridComputedStyle.getPropertyValue(\"grid-template-columns\").split(\" \")\n    setGridColumnCount(gridColumn.length);\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <h1>Pok√©dex</h1>\n      <InfiniteScroll \n        className=\"pokedex\"\n        dataLength={pokemons.length}\n        next={fetchMoreData}  \n        hasMore={hasMore}\n        loader={\n        <div style={{\n          gridColumn: `span ${gridColumnCount}`,\n          justifySelf: 'center',\n          padding: '15px'\n        }}>\n          <div className='loader'></div>\n        </div>\n        }\n      >\n        {pokemons.map((pokemon) => (\n          <Card\n            key={pokemon.id} \n            id={pokemon.id}\n            name={pokemon.name}\n            types={pokemon.types}\n            sprites={pokemon.sprites}\n          />\n        ))}\n      </InfiniteScroll>  \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}